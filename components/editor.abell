{{
  import { md } from '../utils/md.ts';
}}

<div class="editor" style="min-height: {{ props.editorBuilder.minHeight ?? '400px' }}">
  <div class="file-explorer">
    <ul>
      {{
        Object.keys(props.editorBuilder.files).map((filename) => {
          let languageLogo = { src: '/icons/abell.ico', space: '&nbsp;', width: 20 };
          if (filename === 'package.json') {
            languageLogo = { src: '/icons/npm.svg', space: '&nbsp;&nbsp;', width: 15 };
          }

          return /* html */`
          <li class="flex row">
            <button class="flex row ${filename === props.editorBuilder.activeFile ? 'active' : ''}" data-filename="${ filename.replace(/\./g, '-') }"><img width="${languageLogo.width}" src="${ languageLogo.src }" />${ languageLogo.space }${ filename }</button>
          </li>
          `;
        })
      }}
    </ul>
  </div>
  <div class="code-display">
    {{
      () => {
        let htmlCode = '';
        for (const [filename, filecode] of Object.entries(props.editorBuilder.files)) {
          const extension = filename.slice(filename.lastIndexOf('.') + 1);
          const language = extension === 'ts' ? 'typescript' : extension;
          htmlCode += /* html */ `
          <div class="file-${filename.replace(/\./g, '-')} ${filename === props.editorBuilder.activeFile ? 'show' : ''}">
            ${
              md([`~~~${language}\n${filecode}\n~~~`])
            }
          </div>
          `
        }

        return htmlCode;
      }
    }}
  </div>
  <div class="code-preview">
    {{ 
      props.editorBuilder.showURLBar 
      ? /* html */ `
      <select class="url-bar">
        <option>http://localhost:3000<span class="path">/</span></option>
        <option>http://localhost:3000<span class="path">/about</span></option>
      </select>
      ` 
      : '' 
    }}
    <div class="screen">
      {{ props.editorBuilder.output.screen }}
    </div>
  </div>
</div>

<style>
.flex {
  display: flex;
  align-items: center;
  align-self: center;
}
.flex.row {
  flex-direction: row;
}

.editor {
  background-color: #f7f7f7;
  display: flex;
  color: var(--blue-1);
  font-size: 1rem;
  border-radius: 2px;
  box-shadow: 0 1px 2px rgba(0,0,0,0.07), 
              0 2px 4px rgba(0,0,0,0.07), 
              0 4px 8px rgba(0,0,0,0.07), 
              0 8px 16px rgba(0,0,0,0.07),
              0 16px 32px rgba(0,0,0,0.07), 
              0 32px 64px rgba(0,0,0,0.07);
}

button {
  background-color: transparent;
  color: inherit;
  border: none;
  font-size: 1rem;
  padding: 8px 12px;
  cursor: pointer;
  display: block;
  width: 100%;
  opacity: 0.5;
}

button:hover {
  background-color: #fff;
  opacity: 0.6;
}

button.active {
  background-color: #fff;
  border-left: 2px solid var(--blue-5);
  opacity: 1;
}

.file-explorer {
  width: 200px;
  padding: 12px 0px;
}
.code-display {
  background-color: #fff;
  flex: 1;
  padding: 0px 24px;
}
.code-display > div {
  display: none;
}
.code-display > div.show {
  display: block;
}

.code-preview {
  width: 250px;
  background-color: #fff;
  color: #111;
  border-left: 3px solid #f7f7f7;
  font-size: 1rem;
}

.code-preview .url-bar {
  padding: 8px 4px;
  color: #aaa;
  display: block;
  width: 100%;
  border: none;
  box-shadow: 0 1px 2px rgba(0,0,0,0.009), 
            0 2px 4px rgba(0,0,0,0.009), 
            0 4px 8px rgba(0,0,0,0.009), 
            0 8px 16px rgba(0,0,0,0.009),
            0 16px 32px rgba(0,0,0,0.009), 
            0 32px 64px rgba(0,0,0,0.009);
}

.code-preview .screen {
  padding: 24px 24px;
}

ul {
  list-style: none;
  padding: 0px;
}
</style>